name: Build Plugin

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'  # This will trigger on any tag that starts with 'v'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  MAJOR_VERSION: 10
  MINOR_VERSION: 0
  PATCH_VERSION: 2
  PLUGIN_NAME: Lidarr.Plugin.Tidal
  MINIMUM_LIDARR_VERSION: 2.2.4.4129
  DOTNET_VERSION: 8.0.404
  FRAMEWORK: net6.0
  RUNTIME: win-x64
  SENTRY_DSN: ''
  SENTRY_AUTH_TOKEN: ''
  SENTRY_DISABLED: 'true'  # Add this line to disable Sentry

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true
        submodules: recursive  # Ensure submodules are checked out
    
    - name: Update Lidarr submodule
      run: |
        git submodule update --init --recursive
        git -C ext/Lidarr checkout plugins  # Ensure we're on the plugins branch
        git -C ext/Lidarr pull origin plugins  # Pull latest changes
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Set version for tags
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "PLUGIN_VERSION=$TAG_VERSION" >> $GITHUB_ENV
        echo "Using tag version: $TAG_VERSION"
    
    - name: Get build number
      if: ${{ !startsWith(github.ref, 'refs/tags/') }}
      id: build_number
      run: |
        if [ -f .github/workflows/.build_number ]; then
          # Handle encoding issues by ensuring we read only ASCII digits
          BUILD_NUM=$(cat .github/workflows/.build_number | tr -cd '0-9')
          if [ -z "$BUILD_NUM" ] || [ "$BUILD_NUM" = "0" ]; then
            # Fallback if we can't read a valid number
            BUILD_NUM=1
          fi
          echo "BUILD_NUMBER=$BUILD_NUM" >> $GITHUB_ENV
        else
          echo "BUILD_NUMBER=1" >> $GITHUB_ENV
        fi
        echo "Using build number: $BUILD_NUM"
    
    - name: Set version for non-tags
      if: ${{ !startsWith(github.ref, 'refs/tags/') }}
      run: |
        echo "PLUGIN_VERSION=${{ env.MAJOR_VERSION }}.${{ env.MINOR_VERSION }}.${{ env.PATCH_VERSION }}.${{ env.BUILD_NUMBER }}" >> $GITHUB_ENV
    
    - name: Build Lidarr dependencies
      run: |
        cd ext/Lidarr/src
        # Disable Sentry in Directory.Build.props
        sed -i 's/<SentryUploadSymbols>true<\/SentryUploadSymbols>/<SentryUploadSymbols>false<\/SentryUploadSymbols>/g' Directory.Build.props
        dotnet build -c Release -p:SentryUploadSymbols=false -p:TreatWarningsAsErrors=false -p:RunAnalyzers=false
        # List the built assemblies to verify they exist
        find $(pwd) -name "*.dll" | grep -E "Lidarr.(Core|Common)" || true

    - name: Debug Lidarr structure
      run: |
        echo "Checking Lidarr project structure:"
        find ext/Lidarr/src -name "*.csproj" | sort
        
        echo "Checking if Lidarr.Core.dll exists:"
        find ext/Lidarr -name "Lidarr.Core.dll"
        
        echo "Checking TidalSharp project references:"
        grep -r "ProjectReference" src/TidalSharp/TidalSharp.csproj || true

    - name: Debug TidalSharp references
      run: |
        # Check TidalSharp project file
        echo "TidalSharp project file contents:"
        cat src/TidalSharp/TidalSharp.csproj
        
        # Check if Lidarr assemblies exist in expected locations
        echo "Checking for Lidarr assemblies:"
        find ext/Lidarr/src -name "Lidarr.Core.dll"
        find ext/Lidarr/src -name "Lidarr.Common.dll"
        
        # Try to restore packages explicitly
        dotnet restore src/TidalSharp/TidalSharp.csproj --verbosity normal

    - name: Build TidalSharp
      run: |
        # Build TidalSharp separately first with verbose output
        dotnet build src/TidalSharp/TidalSharp.csproj \
          -c Release \
          -p:Version=${{ env.PLUGIN_VERSION }} \
          -p:TreatWarningsAsErrors=false \
          -p:RunAnalyzers=false \
          --verbosity normal
    
    - name: Restore dependencies
      run: dotnet restore src/Lidarr.Plugin.Tidal.sln
    
    - name: Test Solution
      run: dotnet build src/Lidarr.Plugin.Tidal.sln --no-restore -p:TreatWarningsAsErrors=false -p:RunAnalyzers=false
    
    - name: Build
      run: |
        echo "Building version ${{ env.PLUGIN_VERSION }}"
        
        # Create a Directory.Build.targets file with an enhanced approach to resolve SQLite conflicts
        cat > src/Directory.Build.targets << 'EOF'
        <Project>
          <!-- Handle SQLite DLL conflicts -->
          <PropertyGroup>
            <!-- Exclude specific problematic SQLite runtime assets -->
            <RuntimeHostConfigurationOption Include="System.Data.SqlClient.UseManagedNetworkingOnWindows" Value="true" />
            <PublishReadyToRun>false</PublishReadyToRun>
          </PropertyGroup>
          
          <Target Name="RemoveConflictingSQLiteFiles" BeforeTargets="ResolveAssemblyReferences;ComputeFilesToPublish;_HandleFileConflictsForPublish">
            <ItemGroup>
              <!-- Explicitly remove problematic files -->
              <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)" Condition="$([System.String]::Copy('%(Identity)').Contains('runtimes/win-x64/native/net46/sqlite3.dll'))" />
              <ResolvedFileToPublish Remove="@(ResolvedFileToPublish)" Condition="$([System.String]::Copy('%(Identity)').Contains('runtimes/win-x64/native/net46/sqlite3.dll'))" />
            </ItemGroup>
          </Target>
        </Project>
        EOF
        
        # Create empty runtimeconfig.template.json to influence runtime behavior
        cat > src/Lidarr.Plugin.Tidal/runtimeconfig.template.json << 'EOF'
        {
          "configProperties": {
            "System.Data.SqlClient.UseManagedNetworkingOnWindows": true
          }
        }
        EOF
        
        dotnet publish src/${{ env.PLUGIN_NAME }}/${{ env.PLUGIN_NAME }}.csproj \
          -c Release \
          -f ${{ env.FRAMEWORK }} \
          -r ${{ env.RUNTIME }} \
          --self-contained false \
          -p:Version=${{ env.PLUGIN_VERSION }} \
          -p:TreatWarningsAsErrors=false \
          -p:RunAnalyzers=false \
          -p:EnableWindowsTargeting=true \
          -p:CopyLocalLockFileAssemblies=true \
          -p:SkipInvalidConfigurations=true \
          -o _output \
          --verbosity detailed || { echo "Build failed with errors"; exit 1; }
    
    - name: Package
      run: |
        mkdir -p _output/${{ env.PLUGIN_NAME }}
        mv _output/*.dll _output/${{ env.PLUGIN_NAME }}/ 2>/dev/null || true
        mv _output/*.json _output/${{ env.PLUGIN_NAME }}/ 2>/dev/null || true
        mv _output/*.config _output/${{ env.PLUGIN_NAME }}/ 2>/dev/null || true
        
        mkdir -p _artifacts
        cd _output
        zip -r ../_artifacts/${{ env.PLUGIN_NAME }}.${{ env.FRAMEWORK }}.zip ${{ env.PLUGIN_NAME }}
        cd ..
        echo "Created zip file at: $(pwd)/_artifacts/${{ env.PLUGIN_NAME }}.${{ env.FRAMEWORK }}.zip"
        ls -la _artifacts/

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PLUGIN_NAME }}
        path: _artifacts/${{ env.PLUGIN_NAME }}.${{ env.FRAMEWORK }}.zip
        if-no-files-found: error

    - name: Generate Changelog
      id: changelog
      run: |
        echo "# ${{ env.PLUGIN_VERSION }}" > changelog.txt
        echo "" >> changelog.txt
        echo "## Changes in this release:" >> changelog.txt
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "HEAD~10")
          git log --oneline ${PREVIOUS_TAG}..HEAD | awk '{print "- " substr($0, index($0,$2))}' >> changelog.txt
        else
          git log --oneline $(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")..HEAD | awk '{print "- " substr($0, index($0,$2))}' >> changelog.txt
        fi
        cat changelog.txt

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Creating release for tag: ${GITHUB_REF#refs/tags/}"
        echo "Zip file path: _artifacts/${{ env.PLUGIN_NAME }}.${{ env.FRAMEWORK }}.zip"
        ls -la _artifacts/
        
        # Create release using GitHub CLI
        gh release create "${GITHUB_REF#refs/tags/}" \
          --title "Version ${{ env.PLUGIN_VERSION }}" \
          --notes-file changelog.txt \
          _artifacts/${{ env.PLUGIN_NAME }}.${{ env.FRAMEWORK }}.zip
    
    - name: Increment build number
      if: ${{ !startsWith(github.ref, 'refs/tags/') && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      run: |
        echo "$((BUILD_NUMBER + 1))" > .github/workflows/.build_number
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        git add .github/workflows/.build_number
        git commit -m "Increment build number to $((BUILD_NUMBER + 1)) [skip ci]"
        git push




















